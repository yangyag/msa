services:
  eureka-service:
    image: yangyag2/msa-eureka-service-image:v1.1.1
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - msa-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  post-service:
    image: yangyag2/msa-post-service-image:v1.1.0
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka/
    networks:
      - msa-network
    depends_on:
      eureka-service:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  reply-service:
    image: yangyag2/msa-reply-service-image:v1.1.0
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka/
    networks:
      - msa-network
    depends_on:
      eureka-service:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  category-service:
    image: yangyag2/msa-category-service-image:v1.1.6
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/msa_db
      - SPRING_DATASOURCE_USERNAME=msa
      - SPRING_DATASOURCE_PASSWORD=msa!
    networks:
      - msa-network
    depends_on:
      eureka-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  api-gateway:
    image: yangyag2/msa-api-gateway-image:v1.1.22
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka/
    networks:
      - msa-network
    depends_on:
      eureka-service:
        condition: service_healthy
      post-service:
        condition: service_started
      reply-service:
        condition: service_started
      category-service:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  auth-service:
    image: yangyag2/msa-auth-service-image:v1.0.17
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/msa_db
      - SPRING_DATASOURCE_USERNAME=msa
      - SPRING_DATASOURCE_PASSWORD=msa!
    networks:
      - msa-network
    depends_on:
      eureka-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  postgres:
    image: postgres:16
    container_name: msa-postgres
    environment:
      - POSTGRES_DB=msa_db
      - POSTGRES_USER=msa
      - POSTGRES_PASSWORD=msa!
    ports:
      - "5432:5432"
    volumes:
      - msa_postgres_data:/var/lib/postgresql/data
    networks:
      - msa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U msa -d msa_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

networks:
  msa-network:
    driver: bridge

volumes:
  msa_postgres_data: